#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <set>
#include <cassert>
using namespace std;

struct Node{
   Node* next;
   Node* prev;
   int value;
   int key;
   Node(Node* p, Node* n, int k, int val):prev(p),next(n),key(k),value(val){};
   Node(int k, int val):prev(NULL),next(NULL),key(k),value(val){};
};

class Cache{
   
   protected: 
   map<int,Node*> mp; //map the key to the node in the linked list
   int cp;  //capacity
   Node* tail; // double linked list tail pointer
   Node* head; // double linked list head pointer
   virtual void set(int, int) = 0; //set function
   virtual int get(int) = 0; //get function

};

class LRUCache: public Cache {
public:

    LRUCache(int capacity) {
        head = NULL;
        tail = NULL;
        cp = capacity;
    }

    void set(int key, int value) {
        Node *MRUnode;
        if (mp.count(key)) {
            mp[key]->value = value;
            MRUnode = removeAndReturnNode(key);
            addToFront(MRUnode);
        }
        else {
            MRUnode = new Node(key, value);
            addToFront(MRUnode);
            
            if (mp.size() > cp) {
                delete removeAndReturnNode(tail->key);
            }
        }
      
    }

    int get(int key) {
        if (mp.count(key)) {
            Node *MRUnode = removeAndReturnNode(key);
            addToFront(MRUnode);
            
            return mp[key]->value;
        }
        return -1;
        
    }

private:
    void addToFront(Node *MRUnode) {
        if (head) {
            MRUnode->prev = NULL;
            MRUnode->next = head;
            head->prev = MRUnode;
            head = MRUnode;
        }
        else {
            head = MRUnode;
            tail = MRUnode;
        }
        mp[MRUnode->key] = MRUnode;
    }
    
    Node* removeAndReturnNode(int key) {
        auto MRUnode = mp[key]; //idk what auto is..
        mp.erase(key);
        
        if (MRUnode->next) {
            MRUnode->next->prev = MRUnode->prev;
        }
        else {
            tail = MRUnode->prev;
        }
        
        if (MRUnode->prev) {
            MRUnode->prev->next = MRUnode->next;
        }
        else {
            head = MRUnode->next;
        }
        
        return MRUnode;
    }

};


int main() {
   int n, capacity,i;
   cin >> n >> capacity;
   LRUCache l(capacity);
   for(i=0;i<n;i++) {
      string command;
      cin >> command;
      if(command == "get") {
         int key;
         cin >> key;
         cout << l.get(key) << endl;
      } 
      else if(command == "set") {
         int key, value;
         cin >> key >> value;
         l.set(key,value);
      }
   }
   return 0;
}
